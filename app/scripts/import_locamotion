#!/usr/bin/env php
<?php
namespace Langchecker;

$command_help = "import_locamotion - Import strings for www.mozilla.org from Lomocation\n" .
                "Usage: import_locamotion [locale] [filename] [remote]\n\n" .
                "Example: import_locamotion\n" .
                "(import all files from local repository)\n\n" .
                "Example: import_locamotion all main.lang\n" .
                "(import main.lang for all locales from local repository)\n\n" .
                "Example: import_locamotion all all remote\n" .
                "(import all from remote repository)\n";

require_once __DIR__ . '/../inc/cli_init.php';

// User provided variables
$cli_locale       = Utils::getCliParam(1, $argv, 'all');               // Which locale are we analyzing? No default
$cli_filename     = Utils::getCliParam(2, $argv, 'all');               // Which file are we comparing? Set a default
$cli_import_type  = Utils::getCliParam(3, $argv, 'local');             // Importing from remote or local?
$single_file_mode = ($cli_filename != 'all' && $cli_locale != 'all');  // One locale, one file
$local_import     = $cli_import_type == 'remote' ? false : true;

// Exit if trying to import from local without a local repo set
if ($local_import) {
    if (! isset($locamotion_repo)) {
        Utils::logger('Can\'t import from local clone, "locamotion_repo" is not set in config/settings.inc.php.', 'quit');
    }
} else {
    // Set $locamotion_repo to '' for remote import
    $locamotion_repo = '';
}

if ($cli_locale != 'all' && ! in_array($cli_locale, $locamotion_locales)) {
    Utils::logger("{$cli_locale} is not a Locamotion locale.", 'quit');
}

// We only support import for mozilla.org
$current_website = $sites[0];
$updated_files = [];
$import_errors = '';

// Create list of files to analyze
if ($cli_filename == 'all') {
    $file_list = Project::getWebsiteFiles($current_website);
} else {
    // File is not supported
    if (! in_array($cli_filename, Project::getWebsiteFiles($current_website))) {
        $website_name = Project::getWebsiteName($current_website);
        Utils::logger("File {$cli_filename} is not supported for {$website_name}", 'quit');
    }
    $file_list[] = $cli_filename;
}

foreach ($file_list as $current_filename) {
    // Load reference strings
    $reference_locale = Project::getReferenceLocale($current_website);
    $reference_data = LangManager::loadSource($current_website, $reference_locale, $current_filename);
    $reference_filename = Project::getLocalFilePath($current_website, $reference_locale, $current_filename);
    Utils::logger("----\nReference English file: {$reference_filename}");

    // Check if source file exists, if not continue to next file
    if (! file_exists($reference_filename)) {
        Utils::logger("Reference English file is missing ({$reference_filename}).");
        continue;
    }

    // Check if source does not contain any strings
    if (count($reference_data['strings']) == 0) {
        Utils::logger("Reference English seems to be empty or in the wrong format ({$reference_filename}).");
        continue;
    }

    $locale_list = [];

    // Create the list of locales ($locale_list) that we need to analyze for this file
    if ($cli_locale != 'all' &&
        Project::isSupportedLocale($current_website, $cli_locale, $current_filename)) {
        // Single locale is requested and it's supported for this file
        $locale_list[] = $cli_locale;
    } elseif ($cli_locale != 'all' &&
              ! Project::isSupportedLocale($current_website, $cli_locale, $current_filename)) {
        // Locale is not supported for this file
        Utils::logger("{$cli_locale}: {$current_filename} is not supported for this locale.");
        // Stop if we're analyzing only this file for this locale, otherwise continue to next file
        if ($single_file_mode) {
            exit;
        } else {
            continue;
        }
    } else {
        // Intersect Locamotion locales with all supported locales for this file
        $locale_list = array_intersect(
            $locamotion_locales,
            Project::getSupportedLocales($current_website, $current_filename)
        );
    }

    $updated_locales = [];
    $unchanged_locales = [];
    foreach ($locale_list as $current_locale) {
        // For each locale, load existing locale file
        $locale_data = LangManager::loadSource($current_website, $current_locale, $current_filename);
        $locale_filename = Project::getLocalFilePath($current_website, $current_locale, $current_filename);

        // Read file content and EOL character if file exists, otherwise use system end-of-line character
        if (file_exists($locale_filename)) {
            $file_content = file($locale_filename);
            $eol = Utils::checkEOL($file_content[0]);
        } else {
            $eol = PHP_EOL;
        }

        // Import data from locamotion
        $locamotion_import = GetTextManager::importLocamotion($locale_data, $current_filename, $current_locale, $locamotion_repo);

        // Check for errors, even if there are no imported strings
        if ($locamotion_import['errors']) {
            foreach ($locamotion_import['errors'] as $error_message) {
                $import_errors .= "* {$error_message}\n";
            }
        }

        if (! $locamotion_import['imported']) {
            $unchanged_locales[] = $current_locale;
            continue;
        } else {
            // Use strings imported from Locamotion as locale data
            $updated_locales[] = $current_locale;
            $locale_data['strings'] = $locamotion_import['strings'];
            $updated_files[] = "({$current_locale}) {$current_filename}";
        }

        $content = LangManager::buildLangFile($reference_data, $locale_data, $current_locale, $eol);
        Utils::fileForceContent($locale_filename, $content);
    }

    Utils::logger("Updated locales: " . implode(', ', $updated_locales));
    Utils::logger("Unchanged locales: " . implode(', ', $unchanged_locales));
}

if ($updated_files) {
    $result = "List of updated files:\n";
    foreach ($updated_files as $filename) {
        $result .= "* {$filename}\n";
    }
    Utils::logger($result);
} else {
    Utils::logger("----\nThere are no updated files from this import.");
}

if ($import_errors) {
    $result = "There are errors in the source files:\n";
    $result .= $import_errors;
    Utils::logger($result);
}
