#!/usr/bin/env php
<?php
namespace Langchecker;

$command_help = "import_po - Import local .po file in local .lang file\n" .
                "Usage: import_po [pofile] [langfile]\n\n" .
                "Example: import_po test.po /git/it/main.lang\n" .
                "(import test.po into /git/it/main.lang)\n";
$min_parameters = 2;
$missing_parameter = "This command needs more parameters, please check import_po --help.\n";

require_once __DIR__ . '/../inc/cli_init.php';

// User provided variables
$cli_po_filename = realpath(Utils::getCliParam(1, $argv, ''));  // po file to import
$cli_lang_filename = realpath(Utils::getCliParam(2, $argv, ''));  // lang file to use as destination

/*
    If file doesn't exist, I need to use the original cli argument,
    because cli_*_filename will be empty.
*/
if (! file_exists($cli_po_filename)) {
    die(Utils::getCliParam(1, $argv, '') . " does not exist.\n");
}
if (! file_exists($cli_lang_filename)) {
    die(Utils::getCliParam(2, $argv, '') . " does not exist.\n");
}

Utils::logger("po file (source):\n{$cli_po_filename}\n");
Utils::logger("lang file (destination):\n{$cli_lang_filename}\n");

// I consider this file as both reference and locale
$reference_data = DotLangParser::parseFile($cli_lang_filename, true);
$locale_data = DotLangParser::parseFile($cli_lang_filename, false);

$po_import = GetTextManager::importLocalPoFile($cli_po_filename, $locale_data);

if ($po_import['imported']) {
    // I have strings to save
    $locale_data['strings'] = $po_import['strings'];
    $file_content = file($cli_lang_filename);
    $eol = Utils::checkEOL($cli_lang_filename[0]);

    // I pass empty as current_locale (3rd param), no need to manage exceptions
    $content = LangManager::buildLangFile($reference_data, $locale_data, '', $eol);

    Utils::fileForceContent($cli_lang_filename, $content);
    Utils::logger("New strings saved in {$cli_lang_filename}.");
}

if ($po_import['errors']) {
    $import_errors = "\nThere are errors in the source files:\n";
    foreach ($po_import['errors'] as $error_message) {
        $import_errors .= "* {$error_message}\n";
    }
    Utils::logger($import_errors);
}
