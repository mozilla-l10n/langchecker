#!/usr/bin/env php
<?php
namespace Langchecker;

$command_help = "untracked_files - List local lang files not tracked by langchecker\n" .
                "Usage: untracked_files [websiteid] [locale] [absolute]\n\n" .
                "[websiteid] Website ID to analyze (e.g. 0 for mozilla.org)\n" .
                "[locale]    Locale to analyze\n" .
                "[absolute]  If the script should return absolute or relative paths\n" .
                "Example: untracked_files\n" .
                "(list untracked files on mozilla.org for all locales)\n" .
                "Example: untracked_files 1 fr\n" .
                "(list all untracked files on website with ID 1 for French)\n" .
                "Example: untracked_files 1 fr true\n" .
                "(list all untracked files on website with ID 1 for French, displaying absolute paths)\n" .
                "Example: untracked_files 1 locamotion\n" .
                "(list all untracked files on website with ID 1 for Locamotion locales)\n";

require_once __DIR__ . '/../inc/cli_init.php';

// User provided variables
$cli_website = Utils::getCliParam(1, $argv, '0');   // Which website are we looking at? Default www.mozilla.org
$cli_locale = Utils::getCliParam(2, $argv, 'all'); // Which locale are we analyzing? Default all locales
$absolute_path = Utils::getCliParam(3, $argv, '');    // Should return absolute paths?

$lang_based_sites = Project::getWebsitesByDataType($sites, 'lang');

if (! isset($lang_based_sites[$cli_website])) {
    Utils::logger("Unknown website #{$cli_website}.", 'quit');
}
$current_website = $lang_based_sites[$cli_website];

/*
    We have some untracked files that need to be kept. Also Japanese has the
    habit of localizing pages on their own, and we don't want to remove them.
*/
$ignored_files = [
    'legal/terms/acceptable-use.lang',
    'legal/terms/firefox-hello.lang',
    'legal/terms/mozilla.lang',
    'newsletter/confirm.lang',
    'newsletter/existing.lang',
    'newsletter/mozilla-and-you.lang',
    'newsletter/updated.lang',
    'privacy/notices/firefox-hello.lang',
    'privacy/notices/firefox.lang',
];
$ignored_locales = ['hi', 'ja', 'surveygizmo'];

// Create list of locales to analyze
if ($cli_locale == 'all') {
    $locale_list = Project::getSupportedLocales($current_website);
    // Include also the reference locale
    $locale_list[] = Project::getReferenceLocale($current_website);
    // Remove ignored locales
    $locale_list = array_diff($locale_list, $ignored_locales);
} elseif ($cli_locale == 'locamotion') {
    $locale_list = $locamotion_locales;
    $locale_list = array_diff($locale_list, $ignored_locales);
} else {
    if ($cli_locale != Project::getReferenceLocale($current_website)) {
        // It's a standard locale, check if it's supported
        if (! Project::isSupportedLocale($current_website, $cli_locale)) {
            Utils::logger("Unsupported locale #{$cli_locale}.", 'quit');
        }
    }
    $locale_list = [$cli_locale];
}

// Create a list of all the .lang files present in the website folder
$website_path = Project::getLocalFilePath($current_website, '', '');
$directory = new \RecursiveDirectoryIterator($website_path);
$iterator = new \RecursiveIteratorIterator($directory);
$filtered_iterator = new \RegexIterator($iterator, '/^.+\.lang$/i', \RecursiveRegexIterator::GET_MATCH);

$file_list = [];
$folders = [];
foreach ($filtered_iterator as $file_name => $file) {
    /*
        Determine path relative to the website's root folder.
        e.g. zh-TW/description_beta_page.lang
        Later we'll need to store the path relative to each locale's folder.
        e.g. description_beta_page.lang
    */
    $relative_path = Utils::leftStrip($file_name, $website_path);
    $toplevel_folder = explode(DIRECTORY_SEPARATOR, $relative_path)[0];

    // Ignore file if is not inside the list of locales I'm interested in
    if (! in_array($toplevel_folder, $locale_list)) {
        continue;
    }
    if (! in_array($toplevel_folder, $folders)) {
        $folders[] = $toplevel_folder;
    }
    $file_list[] = [
        'full_path'     => $file_name,
        'relative_path' => Utils::leftStrip($relative_path, $toplevel_folder . DIRECTORY_SEPARATOR),
        'locale'        => $toplevel_folder,
    ];
}
sort($file_list);
sort($folders);

// Check if we have locales supported but completely missing
$missing_locales = array_diff($locale_list, $folders);
if (! empty($missing_locales)) {
    foreach ($missing_locales as $missing_locale) {
        Utils::logger("#{$missing_locale} is supported by the website but folder is missing.");
    }
}

// Check if the .lang files available locally are actually tracked by langchecker
$untracked_files = [];
$supported_files = Project::getWebsiteFiles($current_website);

$get_file_path = function ($file_info) use ($absolute_path) {
    return $absolute_path != '' ?
        $file_info['full_path'] :
        $file_info['locale'] . DIRECTORY_SEPARATOR . $file_info['relative_path'];
};

// Add all files not supported for this website
foreach ($file_list as $single_file) {
    if (! in_array($single_file['relative_path'], $supported_files)
        && ! in_array($single_file['relative_path'], $ignored_files)) {
        $untracked_files[] = $get_file_path($single_file);
    }
}

// Add all files not supported for the specific locale, excluding reference
foreach ($file_list as $single_file) {
    $locale = $single_file['locale'];
    if ($locale != Project::getReferenceLocale($current_website)) {
        if (! Project::isSupportedLocale($current_website, $locale, $single_file['relative_path'])
            && ! in_array($single_file['relative_path'], $ignored_files)) {
            $untracked_files[] = $get_file_path($single_file);
        }
    }
}

/*
    Check if there are entire locales unsupported to remove, but only if
    I'm checking more than one locale
*/
if (count($locale_list) > 1) {
    // Get all folders in the requested project
    $local_folders = array_filter(glob($website_path . '*'), 'is_dir');
    $path_length = strlen($website_path);
    $local_folders = array_map(function ($value) use ($path_length) {
        return substr($value, $path_length);
    }, $local_folders);
    // Don't remove ignored locales
    $local_folders = array_diff($local_folders, $ignored_locales);
    $untracked_files += array_diff($local_folders, $locale_list);
}

// Sort and remove duplicates
sort($untracked_files);
$untracked_files = array_unique($untracked_files);

foreach ($untracked_files as $file_name) {
    echo "{$file_name}\n";
}
