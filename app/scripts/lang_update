#!/usr/bin/env php
<?php
namespace Langchecker;

$command_help = "lang_update - Update local lang files\n" .
                "Usage: lang_update [filename] [websiteid] [locale]\n\n" .
                "Example: lang_update mozorg/home.lang 0 all\n" .
                "(update mozorg/home.lang for website 0, all locales)\n";

require_once __DIR__ . '/../inc/cli_init.php';

// User provided variables
$cli_filename = Utils::getCliParam(1, $argv, 'main.lang');           // Which file are we comparing? Set a default
$cli_website = Utils::getCliParam(2, $argv, '0');                   // Which website are we looking at? Default to www.mozilla.org
$cli_locale = Utils::getCliParam(3, $argv, 'all');                 // Which locale are we analyzing? No default
$single_file_mode = $cli_filename != 'all' && $cli_locale != 'all';  // One locale, one file

$lang_based_sites = Project::getWebsitesByDataType($sites, 'lang');

if (! isset($lang_based_sites[$cli_website])) {
    Utils::logger("Unknown website #{$cli_website}.", 'quit');
}

$current_website = $lang_based_sites[$cli_website];

// Create list of files to analyze
if ($cli_filename == 'all') {
    $file_list = Project::getWebsiteFiles($current_website);
} else {
    // File is not supported
    if (! in_array($cli_filename, Project::getWebsiteFiles($current_website))) {
        $website_name = Project::getWebsiteName($current_website);
        Utils::logger("File {$cli_filename} is not supported for website #{$cli_website} ({$website_name}).", 'quit');
    }
    $file_list[] = $cli_filename;
}

foreach ($file_list as $current_filename) {
    // Load reference strings
    $reference_locale = Project::getReferenceLocale($current_website);
    $reference_data = LangManager::loadSource($current_website, $reference_locale, $current_filename);
    $reference_filename = Project::getLocalFilePath($current_website, $reference_locale, $current_filename);
    Utils::logger("Reference English file: {$reference_filename}");

    // Check if source file exists, if not continue to next file
    if (! file_exists($reference_filename)) {
        Utils::logger("Reference English file is missing ({$reference_filename}).");
        continue;
    }

    // Check if source does not contain any strings
    if (count($reference_data['strings']) == 0) {
        Utils::logger("Reference English seems to be empty or in the wrong format ({$reference_filename}).");
        continue;
    }

    $locale_list = [];

    // Create the list of locales ($locale_list) that we need to analyze for this file
    if ($cli_locale != 'all' &&
        Project::isSupportedLocale($current_website, $cli_locale, $current_filename)) {
        // Single locale is requested and it's supported for this file
        $locale_list[] = $cli_locale;
    } elseif ($cli_locale != 'all' &&
              ! Project::isSupportedLocale($current_website, $cli_locale, $current_filename)) {
        // Locale is not supported for this file
        Utils::logger("{$cli_locale}: {$current_filename} is not supported for this locale.");
        // Stop if we're analyzing only this file for this locale, otherwise continue to next file
        if ($single_file_mode) {
            exit;
        } else {
            continue;
        }
    } else {
        // Get all supported locales
        $locale_list = Project::getSupportedLocales($current_website, $current_filename);
    }

    foreach ($locale_list as $current_locale) {
        // For each locale, load existing locale file
        $locale_data = LangManager::loadSource($current_website, $current_locale, $current_filename);
        $locale_filename = Project::getLocalFilePath($current_website, $current_locale, $current_filename);

        // Read file content and EOL character if file exists, otherwise use system end-of-line character
        if (file_exists($locale_filename)) {
            $file_content = file($locale_filename);
            $eol = Utils::checkEOL($file_content[0]);
        } else {
            $eol = PHP_EOL;
        }

        /*
            Incorporate strings from other lang files. To enable import,
            add file names to $import_files (prior files have priority).

            Example: $import_files = ['firefox/new.lang', 'main.lang'];

            1. Find strings in common between the two files.
            2. For each common string, check if the current file has a
               translation. If it doesn't, import it from other files if
               available.

            Default website is mozilla.org (id 0).
        */
        $import_files = [];
        $import_website = 0;

        if (count($import_files) > 0) {
            /*
                Add to $locale_data strings that are available in the
                reference file but are missing in the localized one. This
                way we can import them before building the file.
                Normally this is not necessary, since LangManager::buildLangFile
                takes care of that.
            */
            $missing_strings = array_diff_key(
                $reference_data['strings'],
                $locale_data['strings']
            );
            foreach ($missing_strings as $string_id) {
                $locale_data['strings'][$string_id] = $string_id;
            }

            foreach ($import_files as $import_filename) {
                $import_data = LangManager::loadSource($lang_based_sites[$import_website], $current_locale, $import_filename);
                $common_strings = array_intersect(
                    array_keys($import_data['strings']),
                    array_keys($locale_data['strings'])
                );

                foreach ($common_strings as $string_id) {
                    if ($locale_data['strings'][$string_id] == $string_id &&
                        $import_data['strings'][$string_id] != $string_id) {
                        $locale_data['strings'][$string_id] = $import_data['strings'][$string_id];
                    }
                }
            }
        }

        // Exceptions are managed in LangManager::manageStringExceptions

        $content = LangManager::buildLangFile($reference_data, $locale_data, $current_locale, $eol);
        Utils::fileForceContent($locale_filename, $content);
    }

    Utils::logger("{$current_filename}:\n" . implode(', ', $locale_list));
}
